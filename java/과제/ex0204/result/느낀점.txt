Sample1의 경우
- fulltime과 parttime에는 서로겹치는 부분이 너무나도 많습니다. 그러나 클래스 간의 중복되는 값을
무시하면서 서로 집어넣게 되어, 그 각각의 클래스가 무거워지는 듯한 느낌을 받았습니다.
아직 상속의 기능을 온전히 파악하지는 못해 사실 sample1의 각 클래스가 오히려 기능에 있어
파악하는 것은 쉬웠지만, 정보가 거대해짐에 따라 변수의 양도 증가한다면, 전체 구조를 파악하기
어렵겠다는 생각을 했습니다.

Sample2의 경우
- 겹치는 부분을 하나의 클래스로 정의하여 상속을 받도록 했습니다. 물론, 하나의 클래스를 열어보면서
상속의 주체인 클래스까지도 알아야 한다는 단점이 있었지만, 일정하게 겹치는 부분이 있으면 나중에
정보가 추가가 되거나, 변경 사항이 있을 때 두 부분을 동시에 통제할 수 있다는 점에서 유지보수 부분이
좋을 것이라고 생각하게 되었습니다.
 이후 출력할 때에도 Employee만 출력하여 fulltime과 parttime 두가지의 출력을 안 해도 된다는 점에서
편리했습니다.

특히 코드의 재활용이 중요한 프로그래밍 세계에서는 상속이 그만큼의 기능을 할 수 있도록 사용해야
겠다는 느낌도 들었습니다.